(ns tiy-homework-collection-katas-clojure.core
  (:use tiy-homework-collection-katas-clojure.Katas))

(defn -main []
  ;;first last 6
  (def ints [1, 2, 6])
  (printf "sameFirstLast6(%s) -> %s\n" ints (same-first-last6 ints))
  (def ints [6, 1, 2, 3])
  (printf "sameFirstLast6(%s) -> %s\n" ints (same-first-last6 ints))
  (def ints [13, 6, 1, 2, 3])
  (printf "sameFirstLast6(%s) -> %s\n" ints (same-first-last6 ints))
  (def ints [6])
  (printf "sameFirstLast6(%s) -> %s\n" ints (same-first-last6 ints))
  (def ints [1, 6])
  (printf "sameFirstLast6(%s) -> %s\n" ints (same-first-last6 ints))
  (def ints [1, 6, 7])
  (printf "sameFirstLast6(%s) -> %s\n" ints (same-first-last6 ints))

  (printf "\n\n")
  (def ints [1, 2, 3])
  (printf "sameFirstLast(%s) -> %s\n" ints (same-first-last ints))
  (def ints [1, 2, 3, 1])
  (printf "sameFirstLast(%s) -> %s\n" ints (same-first-last ints))
  (def ints [1, 2, 1])
  (printf "sameFirstLast(%s) -> %s\n" ints (same-first-last ints))
  (def ints [1, 2, 3, 5, 6, 7])
  (printf "sameFirstLast(%s) -> %s\n" ints (same-first-last ints))
  (def ints [5, 1, 2, 3, 5, 6, 7])
  (printf "sameFirstLast(%s) -> %s\n" ints (same-first-last ints))
  (def ints [5, 1, 2, 3, 5, 6, 7, 5])
  (printf "sameFirstLast(%s) -> %s\n" ints (same-first-last ints))

  (printf "\n\n")
  (def ints [1, 2, 3])
  (printf "(rotate-left %s) -> %s\n" ints (rotate-left ints))
  (def ints [5, 11, 9])
  (printf "(rotate-left %s) -> %s\n" ints (rotate-left ints))
  (def ints [7, 0, 0])
  (printf "(rotate-left %s) -> %s\n" ints (rotate-left ints))
  (def ints [6, 3, 9])
  (printf "(rotate-left %s) -> %s\n" ints (rotate-left ints))
  (def ints [1, 2, 3])
  (printf "(rotate-left %s) -> %s\n" ints (rotate-left ints))
  (def ints [77, 55, 2, 7])
  (printf "(rotate-left %s) -> %s\n" ints (rotate-left ints))
  (def ints [1000, 3000, 5000, 8000, 9000])
  (printf "(rotate-left %s) -> %s\n" ints (rotate-left ints))

  (printf "\n\n")
  (def ints [1, 2, 3])
  (printf "reverse(%s)" ints)
  (def new-ints (reverse ints))
  (printf " -> %s\n" new-ints)
  (def ints [5, 11, 9])
  (printf "reverse(%s)" ints)
  (def new-ints (reverse ints))
  (printf " -> %s\n" new-ints)
  (def ints [0, 0, 7])
  (printf "reverse(%s)" ints)
  (def new-ints (reverse ints))
  (printf " -> %s\n" new-ints)
  (def ints [1, 2, 3, 4, 5])
  (printf "reverse(%s)" ints)
  (def new-ints (reverse ints))
  (printf " -> %s\n" new-ints)
  (def ints [1, 2, 3, 4, 5, 6])
  (printf "reverse(%s)" ints)
  (def new-ints (reverse ints))
  (printf " -> %s\n" new-ints)
  (def ints [11, 12])
  (printf "reverse(%s)" ints)
  (def new-ints (reverse ints))
  (printf " -> %s\n" new-ints)
  (def ints [11])
  (printf "reverse(%s)" ints)
  (def new-ints (reverse ints))
  (printf " -> %s\n" new-ints)
  (def ints [])
  (printf "reverse(%s)" ints)
  (def new-ints (reverse ints))
  (printf " -> %s\n" new-ints)


    ;; (sum-first-penultimate [1, 2, 3]) -> 3
  ;; (sum-first-penultimate [1, 1]) -> 2
  ;; (sum-first-penultimate [1, 1, 1, 1]) -> 2
  ;; (sum-first-penultimate [1, 2, 3, 4]) -> 4
  (printf "\n\n")
  (def ints [1, 2, 3])
  (def number (sum-first-penultimate ints))
  (printf "(sum-first-penultimate %s) -> %s\n", ints, number)
  (def ints [1, 1])
  (def number  (sum-first-penultimate ints))
  (printf "(sum-first-penultimate %s) -> %s\n", ints, number)
  (def ints [1, 1, 1, 1])
  (def number  (sum-first-penultimate ints))
  (printf "(sum-first-penultimate %s) -> %s\n", ints, number)
  (def ints [1, 2, 3, 4])
  (def number  (sum-first-penultimate ints))
  (printf "(sum-first-penultimate %s) -> %s\n", ints, number)
  (def ints [1])
  (def number  (sum-first-penultimate ints))
  (printf "(sum-first-penultimate %s) -> %s\n", ints, number)
  (def ints [])
  (def number  (sum-first-penultimate ints))
  (printf "(sum-first-penultimate %s) -> %s\n", ints, number))

(comment
  ;;mapBully({"b": "dirt", "a": "candy"}) -> {"b": "candy", "a": ""}
  ;;mapBully({"a": "candy"}) -> {"b": "candy", "a": ""}
  ;;mapBully({"b": "carrot", "c": "meh", "a": "candy"}) -> {"b": "candy", "c": "meh", "a": ""}
  (printf "\n\n")
  HashMap<String, String> hash = new HashMap<>()
  hash.put("b", "dirt")
  hash.put("a", "candy")
  HashMap<String, String> newHash;
  (printf "mapBully(%s) -> ", hash.toString())
  newHash = mapBully(hash)
  (printf "%s\n", newHash.toString())
  hash.replace("a", "candy")
  hash.remove("b")
  (printf "mapBully(%s) -> ", hash.toString())
  newHash = mapBully(hash)
  (printf "%s\n", newHash.toString())
  hash.clear()
  hash.put("a", "candy")
  hash.put("c", "meh")
  hash.put("b", "carrot")
  (printf "mapBully(%s) -> ", hash.toString())
  newHash = mapBully(hash)
  (printf "%s\n", newHash.toString())
  hash.clear()
  hash.put("a", "")
  hash.put("c", "meh")
  hash.put("b", "carrot")
  (printf "mapBully(%s) -> ", hash.toString())
  newHash = mapBully(hash)
  (printf "%s\n", newHash.toString())
  hash.clear()
  hash.put("a", "candy")
  hash.put("c", "meh")
  hash.put("b", "carrot")
  hash.put("d", "cars")
  (printf "mapBully(%s) -> ", hash.toString())
  newHash = mapBully(hash)
  (printf "%s\n", newHash.toString())
  hash.clear()
  hash.put("c", "meh")
  hash.put("b", "carrot")
  (printf "mapBully(%s) -> ", hash.toString())
  newHash = mapBully(hash)
  (printf "%s\n", newHash.toString())
  
  ;;mapShare({"b": "bbb", "c": "ccc", "a": "aaa"}) -> {"b": "aaa", "a": "aaa"}
  ;;mapShare({"b": "xyz", "c": "ccc"}) -> {"b": "xyz"}
  ;;mapShare({"d": "hi", "c": "meh", "a": "aaa"}) -> {"d": "hi", "b": "aaa", "a": "aaa"}
  (printf "\n\n")
  hash.put("b", "bbb")
  hash.put("a", "aaa")
  hash.put("c", "ccc")
  (printf "mapShare(%s) -> ", hash.toString())
  newHash = mapShare(hash)
  (printf "%s\n", newHash.toString())
  hash.clear()
  hash.put("b", "xyz")
  hash.put("c", "ccc")
  (printf "mapShare(%s) -> ", hash.toString())
  newHash = mapShare(hash)
  (printf "%s\n", newHash.toString())
  hash.clear()
  hash.put("a", "aaa")
  hash.put("c", "meh")
  hash.put("d", "hi")
  (printf "mapShare(%s) -> ", hash.toString())
  newHash = mapShare(hash)
  (printf "%s\n", newHash.toString())
  hash.clear()
  hash.put("a", "")
  hash.put("c", "meh")
  hash.put("b", "carrot")
  (printf "mapShare(%s) -> ", hash.toString())
  newHash = mapShare(hash)
  (printf "%s\n", newHash.toString())
  hash.clear()
  hash.put("a", "candy")
  hash.put("c", "meh")
  hash.put("b", "carrot")
  hash.put("d", "cars")
  (printf "mapShare(%s) -> ", hash.toString())
  newHash = mapShare(hash)
  (printf "%s\n", newHash.toString())
  hash.clear()
  hash.put("c", "meh")
  hash.put("b", "carrot")
  (printf "mapShare(%s) -> ", hash.toString())
  newHash = mapShare(hash)
  (printf "%s\n", newHash.toString())
  
  ;; mapAB({"b": "There", "a": "Hi"}) -> {"b": "There", "a": "Hi", "ab": "HiThere"}
  ;; mapAB({"a": "Hi"}) -> {"a": "Hi"}
  ;; mapAB({"b": "There"}) -> {"b": "There"}
  (printf "\n\n")
  hash.clear()
  hash.put("b", "There")
  hash.put("a", "Hi")
  (printf "mapAB(%s) -> ", hash.toString())
  newHash = mapAB(hash)
  (printf "%s\n", newHash.toString())
  hash.clear()
  hash.put("a", "Hi")
  (printf "mapAB(%s) -> ", hash.toString())
  newHash = mapAB(hash)
  (printf "%s\n", newHash.toString())
  hash.clear()
  hash.put("b", "There")
  (printf "mapAB(%s) -> ", hash.toString())
  newHash = mapAB(hash)
  (printf "%s\n", newHash.toString())
  hash.clear()
  hash.put("b", "There")
  hash.put("a", "Hi")
  hash.put("c", "Play")
  (printf "mapAB(%s) -> ", hash.toString())
  newHash = mapAB(hash)
  (printf "%s\n", newHash.toString())
  hash.clear()
  hash.put("b", " - ")
  hash.put("a", "Hi")
  (printf "mapAB(%s) -> ", hash.toString())
  newHash = mapAB(hash)
  (printf "%s\n", newHash.toString())
  hash.clear()
  hash.put("b", "There")
  hash.put("d", "Hi")
  (printf "mapAB(%s) -> ", hash.toString())
  newHash = mapAB(hash)
  (printf "%s\n", newHash.toString())
  
  ;; wordLen(["a", "bb", "a", "bb"]) -> {"a": 1, "bb": 2}
  ;; wordLen(["this", "and", "that", "and"]) -> {"that": 4, "this": 4, "and": 3}
  ;; wordLen(["code", "code", "code", "bug"]) -> {"bug": 3, "code": 4}
  (printf "\n\n")
  ArrayList<String> wordList = new ArrayList<>()
  wordList.addAll(Arrays.asList("a", "bb", "a", "bb"))
  (printf "wordLen(%s) -> ", wordList.toString())
  newHash = wordLen(wordList)
  (printf "%s\n", newHash.toString())
  wordList.clear()
  wordList.addAll(Arrays.asList("this", "and", "that", "and"))
  (printf "wordLen(%s) -> ", wordList.toString())
  newHash = wordLen(wordList)
  (printf "%s\n", newHash.toString())
  wordList.clear()
  wordList.addAll(Arrays.asList("code", "code", "code", "bug"))
  (printf "wordLen(%s) -> ", wordList.toString())
  newHash = wordLen(wordList)
  (printf "%s\n", newHash.toString())
  wordList.clear()
  wordList.addAll(Arrays.asList("this", "and", "that", "sand castle", "pork"))
  (printf "wordLen(%s) -> ", wordList.toString())
  newHash = wordLen(wordList)
  (printf "%s\n", newHash.toString())
  wordList.clear()
  wordList.addAll(Arrays.asList("science", "mathematics", "engineering", "english"))
  (printf "wordLen(%s) -> ", wordList.toString())
  newHash = wordLen(wordList)
  (printf "%s\n", newHash.toString())
  wordList.clear()
  (printf "wordLen(%s) -> ", wordList.toString())
  newHash = wordLen(wordList)
  (printf "%s\n", newHash.toString())
  
  ;; indexWords(["aardvark", "apple", "zamboni", "phone"]) -> {"a": ["aardvark", "apple"], "p": ["phone"], "z": ["zamboni"]}
  ;; indexWords(["elephant"]) -> {"e": ["elephant"]}
  ;; indexWords([]) -> {}
  ;; indexWords([""]) -> {}
  (printf "\n\n")
  wordList.clear()
  wordList.addAll(Arrays.asList("aardvark", "apple", "zamboni", "phone"))
  (printf "indexWords(%s) -> ", wordList.toString())
  HashMap<String, ArrayList<String>> indexHash;
  indexHash = indexWords(wordList)
  (printf "%s\n", indexHash.toString())
  wordList.clear()
  wordList.add("elephant")
  (printf "indexWords(%s) -> ", wordList.toString())
  indexHash = indexWords(wordList)
  (printf "%s\n", indexHash.toString())
  wordList.clear()
  (printf "indexWords(%s) -> ", wordList.toString())
  indexHash = indexWords(wordList)
  (printf "%s\n", indexHash.toString())
  wordList.clear()
  wordList.add("")
  (printf "indexWords(%s) -> ", wordList.toString())
  indexHash = indexWords(wordList)
  (printf "%s\n", indexHash.toString())
  wordList.clear()
  wordList.addAll(Arrays.asList("presystematic", "pleione", "senatorship", "parietes", "bimane",
                                 "chivvying", "halafian", "carat", "unallegorical", "clubman", "bisulphite", "preinvestigating",
                                 "marie", "theritas", "counterchanging"))
  (printf "indexWords(%s) -> \n", wordList.toString())
  indexHash = indexWords(wordList)
  (printf "%s\n", indexHash.toString())
  wordList.clear()
  wordList.addAll(Arrays.asList("superphysiposed", "kursk", "zophori", "replating", "meteoritic",
                                 "finished", "talaria", "befogging", "cyclonal", "overpuissant", "unthematic",
                                 "realpolitik", "direct", "reincline", "preoblige", "nontanning", "cheeseboard",
                                 "slouchily", "useable", "pierre"))
  (printf "indexWords(%s) -> \n", wordList.toString())
  indexHash = indexWords(wordList)
  (printf "%s\n", indexHash.toString())
  wordList.clear()
  wordList.addAll(Arrays.asList("Tiger", "Emu", "goat", "chicken", "penguin", "dog", "cat", "parakeet",
                                 "mouse", "moose", "angel fish", "trout", "donkey", "horse", "mule", "stork", "crane", "coy",
                                 "panda", "rat", "raccoon", "ferret", "wolf", "fox", "mongoose", "merekat", "bandicoot"))
  (printf "indexWords(%s) -> \n", wordList.toString())
  indexHash = indexWords(wordList)
  (printf "%s\n", indexHash.toString()))

